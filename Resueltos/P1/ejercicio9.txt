Ejercicio 9:

a/b/c) Escribamos la formulación de la función recursiva pensando en un M fijo:

f: {1, ..., m} x {1, ..., n} -> Z
f(i, j) = { |min(A[i][j], 0)| + 1                        si i = m && j = n
          { f(i, j+1) - A[i][j]                          si i = m && j < n && A[i][j] >= 0
          { f(i, j+1) + |A[i][j]|                      si i = m && j < n && A[i][j] < 0
          { f(i+1, j) - A[i][j]                          si i < m && j = n && A[i][j] >= 0
          { f(i+1, j) + |A[i][j]|                        si i < m && j = n && A[i][j] < 0
          { min(f(i+1, j), f(i, j+1)) - A[i][j]          si A[i][j] >= 0
          { min(f(i+1, j), f(i, j+1)) + |A[i][j]|  

Mi función calcula la mínima vida necesaria con f(1,1).

d) Mi algoritmo Top-Down que resuelve el problema:

int life_journey_TD(vector<vector<int>>& grid, vector<vector<int>>& memo, int i, int j){
    int m = grid.size();
    int n = grid[0].size();

    if (i == m - 1 && j == n - 1){
        return abs(min(grid[i][j], 0)) + 1;
    }

    if (memo[i][j] == -1){
        int minLife = 0;

        if (i == m - 1 && j < n - 1){
            minLife = life_journey_TD(grid, memo, i, j+1);
        }

        if (i < m - 1 && j == n - 1){
            minLife = life_journey_TD(grid, memo, i+1, j);
        }

        if (i < m - 1 && j < n - 1){
            minLife = min(life_journey_TD(grid, memo, i+1, j), life_journey_TD(grid, memo, i, j+1));
        }

        if (grid[i][j] >= 0 && grid[i][j] >= minLife){
            memo[i][j] = 1;
        } else if (grid[i][j] >= 0 && grid[i][j] < minLife){
            memo[i][j] = minLife - grid[i][j];
        } else {
            memo[i][j] = minLife + abs(grid[i][j]);
        }
    }

    return memo[i][j];
}

Escribamos ahora la versión Bottom-Up:

int life_journey_BU(vector<vector<int>>& grid){
    int m = grid.size();
    int n = grid[0].size();
    vector<vector<int>> grid (m, vector<int>(n, -1));

    for (int i = m - 1; i >= 0; i--){
        for (int j = n - 1; j >= 0; j--){
            int minLife = 0;

            if (i == m - 1 && j < n - 1){
                minLife = memo[i][j+1];
            } else if (i < m - 1 && j == n - 1){
                minLife = memo[i+1][j];
            } else if (i < m - 1 && j < n - 1){
                minLife = min(memo[i+1][j], memo[i][j+1]);
            }

            if (i == m - 1 && j == n - 1){
                memo[i][j] = abs(min(grid[i][j], 0)) + 1;
            } else if (grid[i][j] >= 0 && grid[i][j] >= minLife){
                memo[i][j] = 1;
            } else if (grid[i][j] >= 0 && grid[i][j] < minLife){
                memo[i][j] = minLife - grid[i][j];
            } else {
                memo[i][j] = minLife + abs(grid[i][j]);
            }
        }
    }

    return grid[0][0];
}